name: Docker

on:
  # Build v1.0.x image every 12 hours
  schedule:
  - cron: '22 */12 * * *'
  push:
    branches: [ 'develop', 'v1*' ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ develop ]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ${{ github.ref_type != 'tag' && 'ghcr.io/' || '' }}
  # github.repository as <account>/<repo>
  IMAGE_NAME: godwoken-prebuilds


jobs:
  docker-build-push:
    runs-on: ubuntu-latest
    # If you specify the access for any of these scopes, all of those that are not specified are set to none.
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ~/.cargo/bin
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('Cargo.lock') }}

      - name: Install Rust components
        run: rustup component add rustfmt && rustup component add clippy
      - name: Install moleculec
        run: |
          test "$(moleculec --version)" = "Moleculec 0.7.2" \
          || CARGO_TARGET_DIR=target/ cargo install moleculec --version 0.7.2 --force
      - name: Install capsule
        env:
          CAPSULE_VERSION: v0.7.0
        run: |
          (which capsule && test "$(capsule --version)" = "Capsule 0.7.0") \
          || curl -OL https://github.com/nervosnetwork/capsule/releases/download/${CAPSULE_VERSION}/capsule_${CAPSULE_VERSION}_x86_64-linux.tar.gz \
          && tar xf capsule_${CAPSULE_VERSION}_x86_64-linux.tar.gz \
          && mv capsule_${CAPSULE_VERSION}_x86_64-linux/capsule ~/.cargo/bin/
          capsule --version

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      # GitHub automatically creates a unique GITHUB_TOKEN secret to use in this workflow.
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.ref_type != 'tag' && github.repository_owner || secrets.DOCKERHUB_USERNAME }}
          password: ${{ github.ref_type != 'tag' && secrets.GITHUB_TOKEN || secrets.DOCKERHUB_TOKEN }}

      - name: Build components
        id: build
        run: |
          make build-components
          echo "record the the component's reference to the outputs of this step"
          cat versions

      - name: Print the references of components
        run: |
          echo ref.component.Godwoken=${{ steps.build.outputs.GODWOKEN_REF }}
          echo ref.component.Godwoken-scripts=${{ steps.build.outputs.GODWOKEN_SCRIPTS_REF }}
          echo ref.component.Polyjuice=${{ steps.build.outputs.POLYJUICE_REF }}
          echo ref.component.omni_lock=${{ steps.build.outputs.OMNI_LOCK_REF }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}${{ startsWith(github.ref, 'refs/tags') && github.repository_owner == 'nervosnetwork' && 'nervos' || github.repository_owner }}/${{ env.IMAGE_NAME }}
          # dynamically set date as a suffix
          tags: |
            type=ref,event=branch,suffix=-{{date 'YYYYMMDDHHmm'}}
            type=ref,event=branch
          labels: |
            maintainer=Nervos Core Dev <dev@nervos.org>
            org.opencontainers.image.authors=Nervos Core Dev <dev@nervos.org>
            source.component.godwoken=https://github.com/nervosnetwork/godwoken
            source.component.godwoken-scripts-Scripts=https://github.com/nervosnetwork/godwoken-scripts
            source.component.godwoken-polyjuice=https://github.com/nervosnetwork/godwoken-polyjuice
            source.component.ckb-production-scripts=https://github.com/nervosnetwork/ckb-production-scripts
            ref.component.godwoken=${{ steps.build.outputs.GODWOKEN_REF }}
            ref.component.godwoken-scripts=${{ steps.build.outputs.GODWOKEN_SCRIPTS_REF }}
            ref.component.godwoken-polyjuice=${{ steps.build.outputs.POLYJUICE_REF }}
            ref.component.ckb-production-scripts=${{ steps.build.outputs.OMNI_LOCK_REF }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image to ${{ env.REGISTRY }}${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
        if: ${{ github.ref_type != 'tag' }}
        uses: docker/build-push-action@v2
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # Build and push Docker image with Buildx (don't push on PR)
      # only for new tag
      - name: Build and push Docker image to https://hub.docker.com/r/nervos/godwoken-prebuilds
        if: ${{ github.repository_owner == 'nervosnetwork' && startsWith(github.ref, 'refs/tags') }}
        uses: docker/build-push-action@v2
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Check versions of the binaries in ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
        env:
          IMAGE: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
        run: |
          docker run --rm ${{ env.IMAGE }} godwoken --version
          docker run --rm ${{ env.IMAGE }} gw-tools --version
          docker run --rm ${{ env.IMAGE }} ckb --version
          docker run --rm ${{ env.IMAGE }} ckb-cli --version
          docker run --rm ${{ env.IMAGE }} ckb-indexer --version
          docker run --rm ${{ env.IMAGE }} find /scripts -type f -exec sha1sum {} \;

  integration-test:
    needs: docker-build-push
    uses: nervosnetwork/godwoken-tests/.github/workflows/reusable-integration-test-v1.yml@develop
    with:
      gw_prebuild_image_name: ${{ needs.docker-build-push.outputs.image_name }}
      gw_prebuild_image_tag: ${{ needs.docker-build-push.outputs.image_tag }}
      # gw_prebuild_image_digest: ${{ needs.docker-build-push.outputs.image_digest }}
