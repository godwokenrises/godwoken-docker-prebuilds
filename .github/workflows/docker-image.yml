name: docker-image 

on:
  push:
    branches: [ add-build-tool ]
  pull_request:
    branches: [ add-build-tool ]

jobs:

  test:
    runs-on: ubuntu-20.04
    if: github.ref == 'refs/heads/add-build-tool' || startsWith(github.ref, 'refs/tags')
    steps:
      - uses: actions/checkout@v2
      - uses: borales/actions-yarn@v2.0.0
      - name: Run Tests
        run: make test

 # deploy:
 #   runs-on: ubuntu-20.04
 #   needs: test
 #   if: startsWith(github.ref, 'refs/tags')
 #   steps:
 #     - name: Extract Version
 #       id: version_step
 #       run: |
 #         echo "##[set-output name=version;]VERSION=nervos/godwoken-prebuilds:${GITHUB_REF#$"refs/tags/v"}"
 #         echo "##[set-output name=version_tag;]$GITHUB_REPOSITORY:${GITHUB_REF#$"refs/tags/v"}"
 #         echo "##[set-output name=latest_tag;]$GITHUB_REPOSITORY:latest"

 #     - name: Set up QEMU
 #       uses: docker/setup-qemu-action@v1

 #     - name: Set up Docker Buildx
 #       uses: docker/setup-buildx-action@v1

 #     - name: Login to DockerHub
 #       uses: docker/login-action@v1
 #       with:
 #         username: ${{ secrets.DOCKER_USER_NAME }}
 #         password: ${{ secrets.DOCKER_ACCESS_TOKEN }}

 #     - name: PrepareReg Names
 #       id: read-docker-image-identifiers
 #       run: |
 #         echo VERSION=$(echo ${{ steps.version_step.outputs.version }} | tr '[:upper:]' '[:lower:]') >> $GITHUB_ENV
 #         echo VERSION_TAG=$(echo ${{ steps.version_step.outputs.version_tag }} | tr '[:upper:]' '[:lower:]') >> $GITHUB_ENV
 #         echo LASTEST_TAG=$(echo ${{ steps.version_step.outputs.latest_tag  }} | tr '[:upper:]' '[:lower:]') >> $GITHUB_ENV

 #     - name: Build and push Docker images
 #       id: docker_build
 #       uses: docker/build-push-action@v2.3.0
 #       with:
 #         push: true
 #         tags: |
 #           ${{env.VERSION}}
 #           ${{env.VERSION_TAG}}
 #           ${{env.LASTEST_TAG}}
 #         build-args: |
 #           ${{steps.version_step.outputs.version}}
 #     
 #     name: Image digest
 #       run: echo ${{ steps.docker_build.outputs.digest }}
